# Version values are required. Load platform values first, followed by those of the top level
# project. Where the top level project is a superset of the platform build, the superset must
# be able to override the default platform values.
include(${HPCC_SOURCE_DIR}/version.cmake)
if (NOT "${CMAKE_SOURCE_DIR}" STREQUAL "%{HPCC_SOURCE_DIR}" AND EXISTS ${CMAKE_SOURCE_DIR}/version.cmake)
    include(${CMAKE_SOURCE_DIR}/version.cmake)
endif()

# Always construct a package file name so expected side effects are not missed. Allow the top
# level project to perform pre- and post-processing steps as needed.
if (EXISTS ${CMAKE_SOURCE_DIR}/cmake_modules/prePackageSetup.cmake)
    include(${CMAKE_SOURCE_DIR}/cmake_modules/prePackageSetup.cmake)
endif()
include(${HPCC_SOURCE_DIR}/cmake_modules/packageSetup.cmake)
if (EXISTS ${CMAKE_SOURCE_DIR}/cmake_modules/postPackageSetup.cmake)
    include(${CMAKE_SOURCE_DIR}/cmake_modules/postPackageSetup.cmake)
endif()

if ("${VCPKG_DONE}" STREQUAL "")
  set (VCPKG_DONE 1)

set(VCPKG_FILES_DIR "${CMAKE_BINARY_DIR}" CACHE STRING "Folder for vcpkg download, build and installed files")
set(CMAKE_TOOLCHAIN_FILE ${HPCC_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake)
set(VCPKG_ROOT ${HPCC_SOURCE_DIR}/vcpkg)
set(VCPKG_INSTALLED_DIR "${VCPKG_FILES_DIR}/vcpkg_installed")
set(VCPKG_INSTALL_OPTIONS "--x-abi-tools-use-exact-versions;--downloads-root=${VCPKG_FILES_DIR}/vcpkg_downloads;--x-buildtrees-root=${VCPKG_FILES_DIR}/vcpkg_buildtrees;--x-packages-root=${VCPKG_FILES_DIR}/vcpkg_packages")
set(VCPKG_VERBOSE OFF)

if(WIN32)
    set(VCPKG_HOST_TRIPLET "x64-windows" CACHE STRING "host triplet")
    set(VCPKG_TARGET_TRIPLET "x64-windows" CACHE STRING "target triplet")
elseif(APPLE)
  if (CMAKE_OSX_ARCHITECTURES MATCHES "arm64")
    set(VCPKG_HOST_TRIPLET "arm64-osx" CACHE STRING "host triplet")
    set(VCPKG_TARGET_TRIPLET "arm64-osx" CACHE STRING "target triplet")
  else()
    set(VCPKG_HOST_TRIPLET "x64-osx" CACHE STRING "host triplet")
    set(VCPKG_TARGET_TRIPLET "x64-osx" CACHE STRING "target triplet")
  endif()
elseif(UNIX)
    set(VCPKG_HOST_TRIPLET "x64-linux-dynamic" CACHE STRING "host triplet")
    set(VCPKG_TARGET_TRIPLET "x64-linux-dynamic" CACHE STRING "target triplet")
endif()

#  Create a catalog of the vcpkg dependencies ---
file(GLOB VCPKG_PACKAGES ${VCPKG_FILES_DIR}/vcpkg_packages/*/CONTROL)
list(APPEND VCPKG_PACKAGE_LIST "-----------------\n")
foreach(VCPKG_PACKAGE ${VCPKG_PACKAGES})
    file(READ ${VCPKG_PACKAGE} VCPKG_PACKAGE_CONTENTS)
    list(APPEND VCPKG_PACKAGE_LIST ${VCPKG_PACKAGE_CONTENTS})
    list(APPEND VCPKG_PACKAGE_LIST "-----------------\n")
endforeach()
# 1. Accept an explicit catalog prefix label; or
# 2. Use the package file name generated by packageSetup.cmake as a prefix; or
# 3. Use the top level project's project name, if set, as a prefix; or
# 4. Use no prefix.
set(VCPKG_CATALOG_NAME "vcpkg-catalog.txt")
if ("${VCPKG_CATALOG_PREFIX}" STREQUAL "")
    set(VCPKG_CATALOG_PREFIX ${PACKAGE_FILE_NAME})
    if ("${VCPKG_CATALOG_PREFIX}" STREQUAL "")
        set(VCPKG_CATALOG_PREFIX ${CMAKE_PROJECT_NAME})
    endif()
endif()
if (NOT "${VCPKG_CATALOG_PREFIX}" STREQUAL "")
    set(VCPKG_CATALOG_NAME "${VCPKG_CATALOG_PREFIX}-${VCPKG_CATALOG_NAME}")
endif()
file(WRITE ${CMAKE_BINARY_DIR}/${VCPKG_CATALOG_NAME} ${VCPKG_PACKAGE_LIST})
if (INSTALL_VCPKG_CATALOG)
    install(FILES ${CMAKE_BINARY_DIR}/${VCPKG_CATALOG_NAME} DESTINATION "." COMPONENT Runtime)
endif()

endif ()
